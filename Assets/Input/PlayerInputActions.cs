//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""225cca41-81dc-40a4-9234-716e2a1e8a10"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""d2c5c41d-65c8-4310-a262-83eb4dc0e635"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""802bea61-071f-4d85-a58c-eec7a967a56c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VehicleEntered"",
                    ""type"": ""Button"",
                    ""id"": ""078d5fc4-a34e-4294-87c9-c8eacaadfc74"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ed676783-3ec5-42ba-a66b-4ebb03df049e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cfec3e85-754f-4743-b042-88b4ae5197de"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6552b8b3-8094-49df-acd0-dab0f8c2fd63"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6922094b-375e-4cc4-9118-e86de8a2af2d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e89211f3-c887-4288-bcc0-46cb46668d24"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""3c0040ff-cc6d-4cd3-b1f7-fbcc1ead4089"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""87c9c92b-ad62-4044-a939-cee12a779c7b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b5ef156b-54ff-44d3-8bb8-ad468b8e2c6a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c1429102-b316-4ff4-a137-0aead4b245b5"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VehicleEntered"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RandomColor"",
            ""id"": ""09f45acc-26fc-4ecf-8df4-72fa7f31cc42"",
            ""actions"": [
                {
                    ""name"": ""AssignRandomColor"",
                    ""type"": ""Button"",
                    ""id"": ""280553bc-ccac-494d-868a-fa002773df05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""49c89e99-7757-41f2-aeea-18dacb45dc9b"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AssignRandomColor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Driving"",
            ""id"": ""ea8a78f7-9de7-439d-844e-bb2ba047fc5b"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""bb7d1c39-68c6-48d7-a614-13c29bcfd73b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""79b7b541-0069-4e59-b609-378e8dc65ee7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3180bc5b-41bb-4909-9e30-6a693c4e6aa0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2574148c-b7ed-4dc6-94ff-0d8e54d276fa"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""694f949d-0526-4a62-86a3-584cef3a1321"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2ea9351f-b37e-4412-85cd-f4bc42910d71"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""BouncyBall"",
            ""id"": ""72c8858a-9a7a-4fa8-a1a8-7a232fc295dd"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""bf21044e-77da-4069-a28d-dec83f9d88dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=1),Tap(duration=0.9)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0a7e3aad-70ab-483f-86a2-db2a5aeca4b8"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Slider"",
            ""id"": ""09739a3b-6f1e-4686-804c-e92c109ad660"",
            ""actions"": [
                {
                    ""name"": ""FillBar"",
                    ""type"": ""Button"",
                    ""id"": ""96d29ccb-aace-4521-9efb-4d140a895a93"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b5dc616d-0dfe-4023-8aa3-d4d3c8573c6f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FillBar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Rotation = m_Player.FindAction("Rotation", throwIfNotFound: true);
        m_Player_VehicleEntered = m_Player.FindAction("VehicleEntered", throwIfNotFound: true);
        // RandomColor
        m_RandomColor = asset.FindActionMap("RandomColor", throwIfNotFound: true);
        m_RandomColor_AssignRandomColor = m_RandomColor.FindAction("AssignRandomColor", throwIfNotFound: true);
        // Driving
        m_Driving = asset.FindActionMap("Driving", throwIfNotFound: true);
        m_Driving_Movement = m_Driving.FindAction("Movement", throwIfNotFound: true);
        // BouncyBall
        m_BouncyBall = asset.FindActionMap("BouncyBall", throwIfNotFound: true);
        m_BouncyBall_Jump = m_BouncyBall.FindAction("Jump", throwIfNotFound: true);
        // Slider
        m_Slider = asset.FindActionMap("Slider", throwIfNotFound: true);
        m_Slider_FillBar = m_Slider.FindAction("FillBar", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Rotation;
    private readonly InputAction m_Player_VehicleEntered;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Rotation => m_Wrapper.m_Player_Rotation;
        public InputAction @VehicleEntered => m_Wrapper.m_Player_VehicleEntered;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Rotation.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotation;
                @VehicleEntered.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnVehicleEntered;
                @VehicleEntered.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnVehicleEntered;
                @VehicleEntered.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnVehicleEntered;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @VehicleEntered.started += instance.OnVehicleEntered;
                @VehicleEntered.performed += instance.OnVehicleEntered;
                @VehicleEntered.canceled += instance.OnVehicleEntered;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // RandomColor
    private readonly InputActionMap m_RandomColor;
    private IRandomColorActions m_RandomColorActionsCallbackInterface;
    private readonly InputAction m_RandomColor_AssignRandomColor;
    public struct RandomColorActions
    {
        private @PlayerInputActions m_Wrapper;
        public RandomColorActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @AssignRandomColor => m_Wrapper.m_RandomColor_AssignRandomColor;
        public InputActionMap Get() { return m_Wrapper.m_RandomColor; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RandomColorActions set) { return set.Get(); }
        public void SetCallbacks(IRandomColorActions instance)
        {
            if (m_Wrapper.m_RandomColorActionsCallbackInterface != null)
            {
                @AssignRandomColor.started -= m_Wrapper.m_RandomColorActionsCallbackInterface.OnAssignRandomColor;
                @AssignRandomColor.performed -= m_Wrapper.m_RandomColorActionsCallbackInterface.OnAssignRandomColor;
                @AssignRandomColor.canceled -= m_Wrapper.m_RandomColorActionsCallbackInterface.OnAssignRandomColor;
            }
            m_Wrapper.m_RandomColorActionsCallbackInterface = instance;
            if (instance != null)
            {
                @AssignRandomColor.started += instance.OnAssignRandomColor;
                @AssignRandomColor.performed += instance.OnAssignRandomColor;
                @AssignRandomColor.canceled += instance.OnAssignRandomColor;
            }
        }
    }
    public RandomColorActions @RandomColor => new RandomColorActions(this);

    // Driving
    private readonly InputActionMap m_Driving;
    private IDrivingActions m_DrivingActionsCallbackInterface;
    private readonly InputAction m_Driving_Movement;
    public struct DrivingActions
    {
        private @PlayerInputActions m_Wrapper;
        public DrivingActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Driving_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Driving; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DrivingActions set) { return set.Get(); }
        public void SetCallbacks(IDrivingActions instance)
        {
            if (m_Wrapper.m_DrivingActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_DrivingActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_DrivingActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_DrivingActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_DrivingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public DrivingActions @Driving => new DrivingActions(this);

    // BouncyBall
    private readonly InputActionMap m_BouncyBall;
    private IBouncyBallActions m_BouncyBallActionsCallbackInterface;
    private readonly InputAction m_BouncyBall_Jump;
    public struct BouncyBallActions
    {
        private @PlayerInputActions m_Wrapper;
        public BouncyBallActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_BouncyBall_Jump;
        public InputActionMap Get() { return m_Wrapper.m_BouncyBall; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BouncyBallActions set) { return set.Get(); }
        public void SetCallbacks(IBouncyBallActions instance)
        {
            if (m_Wrapper.m_BouncyBallActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_BouncyBallActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_BouncyBallActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_BouncyBallActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_BouncyBallActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public BouncyBallActions @BouncyBall => new BouncyBallActions(this);

    // Slider
    private readonly InputActionMap m_Slider;
    private ISliderActions m_SliderActionsCallbackInterface;
    private readonly InputAction m_Slider_FillBar;
    public struct SliderActions
    {
        private @PlayerInputActions m_Wrapper;
        public SliderActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @FillBar => m_Wrapper.m_Slider_FillBar;
        public InputActionMap Get() { return m_Wrapper.m_Slider; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SliderActions set) { return set.Get(); }
        public void SetCallbacks(ISliderActions instance)
        {
            if (m_Wrapper.m_SliderActionsCallbackInterface != null)
            {
                @FillBar.started -= m_Wrapper.m_SliderActionsCallbackInterface.OnFillBar;
                @FillBar.performed -= m_Wrapper.m_SliderActionsCallbackInterface.OnFillBar;
                @FillBar.canceled -= m_Wrapper.m_SliderActionsCallbackInterface.OnFillBar;
            }
            m_Wrapper.m_SliderActionsCallbackInterface = instance;
            if (instance != null)
            {
                @FillBar.started += instance.OnFillBar;
                @FillBar.performed += instance.OnFillBar;
                @FillBar.canceled += instance.OnFillBar;
            }
        }
    }
    public SliderActions @Slider => new SliderActions(this);
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnVehicleEntered(InputAction.CallbackContext context);
    }
    public interface IRandomColorActions
    {
        void OnAssignRandomColor(InputAction.CallbackContext context);
    }
    public interface IDrivingActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IBouncyBallActions
    {
        void OnJump(InputAction.CallbackContext context);
    }
    public interface ISliderActions
    {
        void OnFillBar(InputAction.CallbackContext context);
    }
}
